close all;
%f = '5*exp(-3*x).*sin(1*x+0.7)-1';
f = input_fuction(); % Ввод пользовательской функции
disp('--------------------------------');

disp('Сейчас вам предстоит построить график, чтобы');
disp('затем по нему определить границы для поиска корня.');
    
while true % Отрисовка графика для пользователя
    disp('Введите границы для отображения графика.');
    [a_graph, b_graph] = input_borders(); % Dводим границы для графика
    t = a_graph:(b_graph-a_graph)/1000:b_graph;
    y = f(t);
    plot(t, y, t, zeros(size(t))); % Cтроим график
    title('График функции в указанных границах');
    xlabel('x');
    ylabel('y');
    xlim([a_graph-(b_graph-a_graph)/50, b_graph+(b_graph-a_graph)/50]); % Ограничиваем график для удобства использования
    if abs(mymax(y)-mymin(y)) < 40
        ylim([mymin(y)-(mymax(y)-mymin(y))/20, mymax(y)+(mymax(y)-mymin(y))/20]);
    else
        ylim([-20, 20]);
    end
    drawnow; % Принудительно запускаем график, находясь в цикле
    disp('--------------------------------');
    answer = input('Для продолжения введите любой символ.\nЧтобы перестроить график, введите R: ', 's');
    if ~(all(answer == 'R') && length(answer) == 1) % По желанию пользователя продолжаем работу или перестраиваем график
        break
    end
end
    
disp('--------------------------------');
disp('Введите границы поиска корня.');
[left_t, right_t] = input_borders(); % Ввод границ промежутка для поиска корня

b_point = 'n';
while ~segment_check(f, left_t, right_t) % Проверка промежутка на непрерывность, монотонность, одинаковую выпуклость
    disp('Ошибочно выбран промежуток!');
    disp('На промежутке функция должна быть:');
    disp('-непрерывна;');
    disp('-монотонна;');
    disp('-не менять выпуклости.');
    disp('-иметь разные знаки (для единичного пересечения оси Ox).');
    disp('Введите границы поиска корня снова.');
    b_point = input('Если хотите прервать выполнение программы, введите q:', 's');
    if b_point == 'q'
        break
    end
    [left_t, right_t] = input_borders(); % Ввод границ промежутка для поиска корня
end

if b_point == 'q' % Выход в меню при выборе пользователя
    disp('Выполнение программы прервано');
else
    disp('--------------------------------');
    epsilon = inaccuracy('Введите погрешность поиска корня: '); % Ввод погрешности поиска

    res = solve_1_Newton(f, left_t, right_t, epsilon); % Вызов функции, реализующей алгоритм ньютона
    opt = optimset('TolX', epsilon); % Задание точности для встроенной функции
    mlb_res = fzero(f, [left_t, right_t], opt); % Вызов встроенной функции, близкой к алгоритму ньютона

    disp('--------------------------------');
    disp('Результат:');
    disp(res); % Вывод результата
    disp('Результат через встроенную функцию:');
    disp(mlb_res); % Вывод результата, полученного с помощью встроенной функции

    disp('--------------------------------');
    % Пока пользователь не захочет выйти, будет работать демовариант
end